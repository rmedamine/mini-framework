# EXPLICATION DÉTAILLÉE - router.js
# ==================================

## SYSTÈME DE ROUTAGE HASH-BASED
Le système de routage utilise les hash URLs (#/) pour gérer la navigation sans rechargement de page.

## VARIABLES GLOBALES
let currentRoute = '/'
const listeners = []

LIGNE 1-2: Variables globales du routeur
- currentRoute: Route actuelle (par défaut '/')
- listeners: Tableau des fonctions à appeler lors du changement de route

## FONCTION initRouter() - Initialisation du routeur
export function initRouter() {
  window.addEventListener('hashchange', handleHashChange)
  handleHashChange() 
}

LIGNE 4-7: Fonction d'initialisation du routeur
- LIGNE 5: Écouter les changements de hash dans l'URL
- LIGNE 6: Traiter le hash initial au chargement de la page

## FONCTION handleHashChange() - Gestion des changements de hash
function handleHashChange() {
  currentRoute = window.location.hash.replace('#', '') || '/'
  listeners.forEach(fn => fn(currentRoute))
}

LIGNE 9-12: Fonction appelée à chaque changement de hash
- LIGNE 10: Extraire la route du hash (ex: #/active → /active)
- LIGNE 11: Si pas de hash, utiliser '/' par défaut
- LIGNE 12: Notifier tous les listeners avec la nouvelle route

## FONCTION onRouteChange() - Enregistrement de listeners
export function onRouteChange(fn) {
  listeners.push(fn)
}

LIGNE 14-16: Fonction pour s'abonner aux changements de route
- LIGNE 15: Ajouter la fonction au tableau des listeners
- UTILISATION: onRouteChange(render) pour re-rendre l'app

## FONCTION getCurrentRoute() - Récupération de la route actuelle
export function getCurrentRoute() {
  return currentRoute
}

LIGNE 18-20: Fonction pour obtenir la route actuelle
- LIGNE 19: Retourner la route stockée en mémoire

## COMMENT ÇA FONCTIONNE
========================

### 1. INITIALISATION
```javascript
initRouter()
```
- Ajoute l'écouteur d'événement 'hashchange'
- Traite le hash initial

### 2. CHANGEMENT DE ROUTE
```javascript
// L'utilisateur clique sur un lien
<a href="#/active">Active</a>

// Ou navigation programmatique
window.location.hash = '/active'
```

### 3. NOTIFICATION
```javascript
// handleHashChange() est appelée automatiquement
currentRoute = '/active'
listeners.forEach(fn => fn('/active'))
```

### 4. RÉACTION
```javascript
// Tous les listeners sont notifiés
render() // Re-rend l'application avec la nouvelle route
```

## EXEMPLE D'UTILISATION COMPLET
================================

### 1. INITIALISATION
```javascript
import { initRouter, onRouteChange, getCurrentRoute } from './router.js'

// Initialiser le routeur
initRouter()

// S'abonner aux changements de route
onRouteChange(render)
```

### 2. RENDU CONDITIONNEL
```javascript
function render() {
  const route = getCurrentRoute()
  
  if (route === '/') {
    // Afficher la page d'accueil
    mount(app, homeView)
  } else if (route === '/active') {
    // Afficher les todos actifs
    mount(app, activeView)
  } else if (route === '/completed') {
    // Afficher les todos complétés
    mount(app, completedView)
  }
}
```

### 3. NAVIGATION
```javascript
// Liens dans le HTML
<a href="#/">Tous</a>
<a href="#/active">Actifs</a>
<a href="#/completed">Complétés</a>

// Ou navigation programmatique
function goToActive() {
  window.location.hash = '/active'
}
```

## AVANTAGES DU SYSTÈME HASH-BASED
===================================

### 1. SIMPLICITÉ
- Pas besoin de configuration serveur
- Fonctionne avec n'importe quel hébergement statique

### 2. COMPATIBILITÉ
- Fonctionne dans tous les navigateurs
- Pas de dépendance à l'API History

### 3. PERFORMANCE
- Pas de rechargement de page
- Navigation instantanée

### 4. INTÉGRATION FACILE
- S'intègre parfaitement avec le système de store
- Re-rendu automatique lors du changement de route

## EXEMPLE DANS TODO MVC
========================

### ROUTES SUPPORTÉES
```javascript
// Dans app.js
function getVisibleTodos() {
  const { todos } = store.state
  const route = getCurrentRoute()
  
  if (route === '/active') return todos.filter(t => !t.completed)
  if (route === '/completed') return todos.filter(t => t.completed)
  return todos // Route '/'
}
```

### LIENS DE NAVIGATION
```javascript
// Dans le rendu
el('a', {
  href: '#/',
  class: route === '/' ? 'selected' : '',
  children: ['All']
}),
el('a', {
  href: '#/active',
  class: route === '/active' ? 'selected' : '',
  children: ['Active']
}),
el('a', {
  href: '#/completed',
  class: route === '/completed' ? 'selected' : '',
  children: ['Completed']
})
```

## LIMITATIONS ET AMÉLIORATIONS POSSIBLES
=========================================

### LIMITATIONS ACTUELLES
1. Pas de gestion des paramètres de route (/user/123)
2. Pas de gestion des routes imbriquées
3. Pas de protection de routes (authentification)
4. Pas de gestion des erreurs 404

### AMÉLIORATIONS POSSIBLES
```javascript
// Ajouter la gestion des paramètres
function parseRoute(route) {
  const [path, query] = route.split('?')
  const params = new URLSearchParams(query)
  return { path, params }
}

// Ajouter la gestion des routes avec paramètres
function matchRoute(pattern, route) {
  // /user/:id → /user/123
  const regex = pattern.replace(/:\w+/g, '([^/]+)')
  const match = route.match(new RegExp(`^${regex}$`))
  return match ? match.slice(1) : null
}

// Ajouter la gestion des erreurs 404
function handleRoute(route) {
  if (route === '/') return homeView
  if (route === '/active') return activeView
  if (route === '/completed') return completedView
  return notFoundView // Page 404
}
```

## INTÉGRATION AVEC LE STORE
============================

Le routeur s'intègre parfaitement avec le système de store :

```javascript
// Store avec route
const store = createStore({
  todos: [],
  currentRoute: '/'
})

// Mise à jour du store lors du changement de route
onRouteChange(route => {
  store.setState({ ...store.state, currentRoute: route })
})

// Re-rendu automatique
store.subscribe(render)
```

## EXEMPLE DE NAVIGATION PROGRAMMATIQUE
=======================================

```javascript
// Fonctions de navigation
function navigateToHome() {
  window.location.hash = '/'
}

function navigateToActive() {
  window.location.hash = '/active'
}

function navigateToCompleted() {
  window.location.hash = '/completed'
}

// Utilisation dans les événements
el('button', {
  onclick: navigateToActive,
  children: ['Voir les actifs']
})
```

## GESTION DE L'HISTORIQUE
==========================

Le système hash-based gère automatiquement l'historique :

```javascript
// Navigation
window.location.hash = '/active'  // Ajoute à l'historique

// Bouton retour du navigateur
// → Déclenche 'hashchange'
// → Appelle handleHashChange()
// → Notifie les listeners
// → Re-rend l'application
```

## TESTS ET DÉBOGAGE
====================

### TESTS MANUELS
```javascript
// Dans la console du navigateur
getCurrentRoute() // Voir la route actuelle
window.location.hash = '/test' // Changer de route
// Vérifier que l'app se met à jour
```

### LOGS DE DÉBOGAGE
```javascript
// Ajouter des logs pour débugger
function handleHashChange() {
  const oldRoute = currentRoute
  currentRoute = window.location.hash.replace('#', '') || '/'
  console.log(`Route changed: ${oldRoute} → ${currentRoute}`)
  listeners.forEach(fn => fn(currentRoute))
}
``` 